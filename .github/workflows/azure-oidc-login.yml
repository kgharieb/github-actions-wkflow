name: Deploy Terraform to Azure with OIDC
on:
  workflow_dispatch:

permissions:
  id-token: write # Required for OIDC connection to Azure
  contents: read # Required for actions/checkout

concurrency:
  group: terraform-${{ github.ref }}
  cancel-in-progress: false

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login with OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.7.5
          terraform_wrapper: false

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Init
        id: init
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          STORAGE_ACCOUNT: ${{ secrets.STORAGE_ACCOUNT }}
          CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}
          RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP_NAME }}
          ARM_USE_OIDC: "true"
        run: |
          terraform init \
            -backend-config="resource_group_name=$RESOURCE_GROUP" \
            -backend-config="storage_account_name=$STORAGE_ACCOUNT" \
            -backend-config="container_name=$CONTAINER_NAME" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="use_oidc=true" \
            -backend-config="use_azuread_auth=true"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          TF_VAR_admin_password: ${{ secrets.VM_ADMIN_PASSWORD }}
          ARM_USE_OIDC: "true"
        run: |
          set +e
          terraform plan -out=tfplan -detailed-exitcode
          PLAN_EXIT_CODE=$?
          echo "exit_code=$PLAN_EXIT_CODE" >> $GITHUB_OUTPUT

          if [ $PLAN_EXIT_CODE -eq 1 ]; then
            echo "❌ Terraform plan failed with errors"
            exit 1
          elif [ $PLAN_EXIT_CODE -eq 2 ]; then
            echo "✅ Plan succeeded with changes detected"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "✅ Plan succeeded with no changes"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload Terraform Plan
        if: steps.plan.outputs.has_changes == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: tfplan
          retention-days: 5

      - name: Terraform Plan Summary
        if: steps.plan.outputs.has_changes == 'true'
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          TF_VAR_admin_password: ${{ secrets.VM_ADMIN_PASSWORD }}
          ARM_USE_OIDC: "true"
        run: |
          echo "### Terraform Plan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          terraform show -no-color tfplan >> $GITHUB_STEP_SUMMARY

      - name: Terraform Apply
        id: apply
        if: steps.plan.outputs.has_changes == 'true'
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          TF_VAR_admin_password: ${{ secrets.VM_ADMIN_PASSWORD }}
          ARM_USE_OIDC: "true"
        run: terraform apply -auto-approve tfplan

      - name: Deployment Summary
        if: always()
        run: |
          echo "### Deployment Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Format Check:** ${{ steps.fmt.outcome }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Validation:** ${{ steps.validate.outcome }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Plan:** ${{ steps.plan.outcome }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Apply:** ${{ steps.apply.outcome || 'skipped' }}" >> $GITHUB_STEP_SUMMARY